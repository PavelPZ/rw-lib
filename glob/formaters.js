System.register([], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var allLangs, formaterFncs;
    return {
        setters:[],
        execute: function() {
            exports_1("allLangs", allLangs = ['cs', 'de', 'en']);
            exports_1("formaterFncs", formaterFncs = {
                dateFull: function (glob) { return glob.dateFormatter({ date: "full" }); },
                dateLong: function (glob) { return glob.dateFormatter({ date: "long" }); },
                dateMedium: function (glob) { return glob.dateFormatter({ date: "medium" }); },
                dateShort: function (glob) { return glob.dateFormatter({ date: "short" }); },
                number0_0: function (glob) { return glob.numberFormatter({ style: 'decimal', minimumFractionDigits: 0, maximumFractionDigits: 0 }); },
                number0_1: function (glob) { return glob.numberFormatter({ style: 'decimal', minimumFractionDigits: 0, maximumFractionDigits: 1 }); },
                number1_1: function (glob) { return glob.numberFormatter({ style: 'decimal', minimumFractionDigits: 1, maximumFractionDigits: 1 }); },
                number0_2: function (glob) { return glob.numberFormatter({ style: 'decimal', minimumFractionDigits: 0, maximumFractionDigits: 2 }); },
                number2_2: function (glob) { return glob.numberFormatter({ style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2 }); },
                percent0_0: function (glob) { return glob.numberFormatter({ style: 'percent', minimumFractionDigits: 0, maximumFractionDigits: 0 }); },
                percent0_1: function (glob) { return glob.numberFormatter({ style: 'percent', minimumFractionDigits: 0, maximumFractionDigits: 1 }); },
                percent1_1: function (glob) { return glob.numberFormatter({ style: 'percent', minimumFractionDigits: 1, maximumFractionDigits: 1 }); },
            });
        }
    }
});
//export function getFormater
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZm9ybWF0ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztRQVFXLFFBQVEsRUFnQ1IsWUFBWTs7OztZQWhDWixzQkFBQSxRQUFRLEdBQUcsQ0FBRSxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUksQ0FBRSxDQUFBLENBQUM7WUFnQ2xDLDBCQUFBLFlBQVksR0FBa0I7Z0JBQ3ZDLFFBQVEsRUFBRSxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBcEMsQ0FBb0M7Z0JBQ3RELFFBQVEsRUFBRSxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBcEMsQ0FBb0M7Z0JBQ3RELFVBQVUsRUFBRSxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBdEMsQ0FBc0M7Z0JBQzFELFNBQVMsRUFBRSxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBckMsQ0FBcUM7Z0JBQ3hELFNBQVMsRUFBRSxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLHFCQUFxQixFQUFFLENBQUMsRUFBRSxxQkFBcUIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUE5RixDQUE4RjtnQkFDakgsU0FBUyxFQUFFLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQTlGLENBQThGO2dCQUNqSCxTQUFTLEVBQUUsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxxQkFBcUIsRUFBRSxDQUFDLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBOUYsQ0FBOEY7Z0JBQ2pILFNBQVMsRUFBRSxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLHFCQUFxQixFQUFFLENBQUMsRUFBRSxxQkFBcUIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUE5RixDQUE4RjtnQkFDakgsU0FBUyxFQUFFLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQTlGLENBQThGO2dCQUNqSCxVQUFVLEVBQUUsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxxQkFBcUIsRUFBRSxDQUFDLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBOUYsQ0FBOEY7Z0JBQ2xILFVBQVUsRUFBRSxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLHFCQUFxQixFQUFFLENBQUMsRUFBRSxxQkFBcUIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUE5RixDQUE4RjtnQkFDbEgsVUFBVSxFQUFFLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQTlGLENBQThGO2FBQ25ILENBQUEsQ0FBQTs7OztBQUVELDZCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgRm9ybWF0dGVyT3JQYXJzZXJGdW5jdGlvbiB7XHJcbiAgKC4uLmFyZ3M6IGFueVtdKTogYW55O1xyXG59XHJcbmV4cG9ydCB0eXBlIGdldEZvcm1hdHRlckZuYyA9IChnbG9iOiBHbG9iYWxpemVTdGF0aWMpID0+IEZvcm1hdHRlck9yUGFyc2VyRnVuY3Rpb247XHJcbmV4cG9ydCB0eXBlIGRhdGVGb3JtYXR0ZXIgPSAodmFsdWU6IERhdGUpID0+IHN0cmluZztcclxuZXhwb3J0IHR5cGUgbnVtYmVyRm9ybWF0dGVyID0gKHZhbHVlOiBudW1iZXIpID0+IHN0cmluZztcclxuXHJcbmV4cG9ydCB0eXBlIFRBbGxMYW5ncyA9ICdjcycgfCAnZGUnIHwgJ2VuJztcclxuZXhwb3J0IHZhciBhbGxMYW5ncyA9IFsgJ2NzJyAsICdkZScgLCAnZW4nIF07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElGb3JtYXRlckZuY3Mge1xyXG4gIGRhdGVGdWxsOiBnZXRGb3JtYXR0ZXJGbmM7XHJcbiAgZGF0ZUxvbmc6IGdldEZvcm1hdHRlckZuYztcclxuICBkYXRlTWVkaXVtOiBnZXRGb3JtYXR0ZXJGbmM7XHJcbiAgZGF0ZVNob3J0OiBnZXRGb3JtYXR0ZXJGbmM7XHJcbiAgbnVtYmVyMF8wOiBnZXRGb3JtYXR0ZXJGbmM7XHJcbiAgbnVtYmVyMF8xOiBnZXRGb3JtYXR0ZXJGbmM7XHJcbiAgbnVtYmVyMV8xOiBnZXRGb3JtYXR0ZXJGbmM7XHJcbiAgbnVtYmVyMF8yOiBnZXRGb3JtYXR0ZXJGbmM7XHJcbiAgbnVtYmVyMl8yOiBnZXRGb3JtYXR0ZXJGbmM7XHJcbiAgcGVyY2VudDBfMDogZ2V0Rm9ybWF0dGVyRm5jO1xyXG4gIHBlcmNlbnQwXzE6IGdldEZvcm1hdHRlckZuYztcclxuICBwZXJjZW50MV8xOiBnZXRGb3JtYXR0ZXJGbmM7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUZvcm1hdGVyIHtcclxuICBkYXRlRnVsbDogZGF0ZUZvcm1hdHRlcjtcclxuICBkYXRlTG9uZzogZGF0ZUZvcm1hdHRlcjtcclxuICBkYXRlTWVkaXVtOiBkYXRlRm9ybWF0dGVyO1xyXG4gIGRhdGVTaG9ydDogZGF0ZUZvcm1hdHRlcjtcclxuICBudW1iZXIwXzA6IG51bWJlckZvcm1hdHRlcjtcclxuICBudW1iZXIwXzE6IG51bWJlckZvcm1hdHRlcjtcclxuICBudW1iZXIxXzE6IG51bWJlckZvcm1hdHRlcjtcclxuICBudW1iZXIwXzI6IG51bWJlckZvcm1hdHRlcjtcclxuICBudW1iZXIyXzI6IG51bWJlckZvcm1hdHRlcjtcclxuICBwZXJjZW50MF8wOiBudW1iZXJGb3JtYXR0ZXI7XHJcbiAgcGVyY2VudDBfMTogbnVtYmVyRm9ybWF0dGVyO1xyXG4gIHBlcmNlbnQxXzE6IG51bWJlckZvcm1hdHRlcjtcclxufVxyXG5cclxuZXhwb3J0IHZhciBmb3JtYXRlckZuY3M6IElGb3JtYXRlckZuY3MgPSB7XHJcbiAgZGF0ZUZ1bGw6IGdsb2IgPT4gZ2xvYi5kYXRlRm9ybWF0dGVyKHsgZGF0ZTogXCJmdWxsXCIgfSksXHJcbiAgZGF0ZUxvbmc6IGdsb2IgPT4gZ2xvYi5kYXRlRm9ybWF0dGVyKHsgZGF0ZTogXCJsb25nXCIgfSksXHJcbiAgZGF0ZU1lZGl1bTogZ2xvYiA9PiBnbG9iLmRhdGVGb3JtYXR0ZXIoeyBkYXRlOiBcIm1lZGl1bVwiIH0pLFxyXG4gIGRhdGVTaG9ydDogZ2xvYiA9PiBnbG9iLmRhdGVGb3JtYXR0ZXIoeyBkYXRlOiBcInNob3J0XCIgfSksXHJcbiAgbnVtYmVyMF8wOiBnbG9iID0+IGdsb2IubnVtYmVyRm9ybWF0dGVyKHsgc3R5bGU6ICdkZWNpbWFsJywgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAwLCBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDAgfSksXHJcbiAgbnVtYmVyMF8xOiBnbG9iID0+IGdsb2IubnVtYmVyRm9ybWF0dGVyKHsgc3R5bGU6ICdkZWNpbWFsJywgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAwLCBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDEgfSksXHJcbiAgbnVtYmVyMV8xOiBnbG9iID0+IGdsb2IubnVtYmVyRm9ybWF0dGVyKHsgc3R5bGU6ICdkZWNpbWFsJywgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAxLCBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDEgfSksXHJcbiAgbnVtYmVyMF8yOiBnbG9iID0+IGdsb2IubnVtYmVyRm9ybWF0dGVyKHsgc3R5bGU6ICdkZWNpbWFsJywgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAwLCBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDIgfSksXHJcbiAgbnVtYmVyMl8yOiBnbG9iID0+IGdsb2IubnVtYmVyRm9ybWF0dGVyKHsgc3R5bGU6ICdkZWNpbWFsJywgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAyLCBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDIgfSksXHJcbiAgcGVyY2VudDBfMDogZ2xvYiA9PiBnbG9iLm51bWJlckZvcm1hdHRlcih7IHN0eWxlOiAncGVyY2VudCcsIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMCwgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiAwIH0pLFxyXG4gIHBlcmNlbnQwXzE6IGdsb2IgPT4gZ2xvYi5udW1iZXJGb3JtYXR0ZXIoeyBzdHlsZTogJ3BlcmNlbnQnLCBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDAsIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMSB9KSxcclxuICBwZXJjZW50MV8xOiBnbG9iID0+IGdsb2IubnVtYmVyRm9ybWF0dGVyKHsgc3R5bGU6ICdwZXJjZW50JywgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAxLCBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDEgfSksXHJcbn1cclxuXHJcbi8vZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1hdGVyXHJcblxyXG4iXX0=